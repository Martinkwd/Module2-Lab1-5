/* I. Selectors */
/* Put styles for questions 1.1, 1.2, 1.3 and 1.4 here */

article {
    /*using nothing more the element means that this is a "type selector"*/
    margin: 20px 0;
    padding: 20px;
    border: 1px solid black;

}

.style-me1 {
    /*using the dot "." means that this is a "class selector"*/
    color: red;
}

#style-me2 {
    /*using the dot "." means that this is a "type selector"*/
    color: blue;
}

.style-me1#style-me2 {
    /*using the dot "." then class and #id means that this is a "specific selector"*/
    color: purple;


}


/* Put styles for questions 2.1 and 2.2 here */

.my-descendants-are-styled { /* We want elements with the "my-descendants-are-styled"
    class to style their descendant paragraph elements. To do that you'd add a 
    p after the class name (seperated by a space).*/
    background-color: red;
}

.my-children-are-styled { /* This part is supposed to have a > p to select only the direct children
    paragraph elements of the "my-children-are-styled" class. Because the > p is missing, all 
    descendants of elements with this class will have this styling. To make only direct children 
    paragraph elements have this styling, the CSS selector should be ".my-children-are-styled > p.*/
    background-color: lightgreen;
}


/* II. Box model and common properties */
/* Put styles for questions 1-8 here */

.box {
    background-color: aqua; /* 1.1*/

    /* 1.2*/

    /* 4 value syntax*/
    margin: 10px 25px 20px 15px;
    padding: 5px 20px 15px 10px;

    /* 2 value syntax*/
    /* margin: 10px 20px;
    padding: 5px 10px; */

    /* 1 value syntax*/
    /* margin: 25;      <-- Plain valid numbers are not valid values for the margin property.
    You'd need to add some sort of length unit (px, rem, vw, etc)
    padding: 15px; */

    /* 1 value syntax*/
    /* margin: 25;      <-- Same as up above. Here is a link for length units for reference
    https://www.w3schools.com/cssref/css_units.php
    padding: 15px; */

    /* em unites syntax*/
    /* margin: 1em;
    padding: 5em; */
    
    /* % syntax*/
    /* margin: 15%;
    padding: 20%; */

    /* 2.1*/

    /* px */

    /* width: 500px;
    height: 200px; */

    /* rem */
    /* width: 15em; !important
    height: 10em; !important */

    /* vh stands for viewport height*/

    width: 50vh !important;
    height: 20vh !important;

    /* vw stands for viewport width*/

    /* width: 30vw;
    height: 20vw; */




    /* observations that the third box does not change is because the style attrubute is more important than the changes, it means if you want to make the changes in css you have to use the element !important to see the changes */
    /* rezing the windows browser shows me that the paraphas change and combane with the other boxes making it unreadable  */

}

.box {
    margin: 10px 25px 20px 15px;
    padding: 10px 00px 150px 100px;
    background-color: aqua; /* 1.1*/
    border: 15px solid black ;
    border: 5px solid violet;
    border: 10px solid red;
    box-sizing:border-box;
    overflow: auto;
    outline: 10px;
    border-radius: 50%;
    background-image: url("img1.png");
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    

}
/* obeservation using border-box: the text in the box change the content and it does to fit in the box
content-box fix that problem making the box with not problems */
/* obeservation using overflow hidden makes the text hidde inside the box but you are not able to read it. 
However, using auto or scroll gives you the option to see the text scrolling down in the box */


/* III. Positioning */
/* Put styles for questions 1-3 here */

.position-absolute{
    position: absolute;
    top: 0;
    background-color: blue;
    left: 0;

    
}
.position-relative{
    position: relative;
    background-color: green;

}

/* absolute positining within relavies can freely moved around the relative based on the parent's position.
Absolute positioning outside of the relative: this goes to the nearest positined ancestor  */
/* added left/right postion value to .position-absolute: this move the text to different postions depending on the element  */

.position-sticky{
    position: sticky;
    background-color: paleturquoise;
    top: 0;

}

/* COMMENT FOR ME: THIS MAKE THAT THE TEXT NOT MOVE FROM THE POSITON, SO IF YOU SCROLL ON THE WEBPAGE
YOU WILL STILL SEEING THE TEXT ON THE TOP */




/* IV. Styling text */
/* Put styles for questions 1-10 here */
.text-style{
    color: royalblue;
    font-size:x-large;
    line-height: 1.5;
    font-weight: 400;
    font-family: "Jacquard 24 Charted", system-ui;
    /* The following properties should be added here to experiment with them:
    text-align
    letter-spacing
    word-spacing
    text-transform
    text-decoration*/
}

/* V. Styling links */
/* Put styles for questions 1-3 here */

a:link{
    color: green;
    font-size: 25px;
    font-weight: bold;
    text-decoration: none;

}

a:hover{
    color: red;
    text-decoration: none;
}
a:active{
    color: black;
    text-decoration: dotted;

}

a:focus{
    color: blueviolet;
    text-decoration: line-through;
}

a:visited{
    color: brown;
    font-style: italic;
}
/* VI. calc() */
/* Put styles for questions 1-3 here */

.calc-style{
    width: 100vw;
    background-color: blueviolet;
    width: calc(100vw - 100px);
}

.fixed-width-col{
    width: 350px;
    display: inline-block;
}
.fluid-col{
    display:inline-block;
    width: calc(100vw - 350px);
    /* In this exercise, the text is supposed to sit in the same line as the image.
    The body has a default margin added by the browser, so the article does not take up
    the full width of the page. The article element then also has padding, so the children
    within the article will not be able to take up the full width of the article. To get the
    text to sit next to the image, you could use % instead of vw (to get the full width of the
    article instead of the viewport), and then takeaway the padding x 2 as well as the
    fixed-width-col class width. In this case, the article has a padding of 20px and the
    fixed-width-col class has a width of 350px. To make the text fit the maximum available width,
    you could use calc(100% - 350px - 20px * 2). The padding takes up room on both the left
    and right side so that's why you need to multiply the padding by 2. If you want the calc
    to take up less space, you could also do calc(100% - 390px)*/
}